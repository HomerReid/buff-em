dMax=4;

<< DefineP.math

(*************************************************************)
(*************************************************************)
(*************************************************************)
<< GetXiLimits.math
<< DuffyTransformations.math

(*************************************************************)
(*************************************************************)
(*************************************************************)
PBar4CV[d_, u1_, u2_, u3_]:=Module[ {ABCDEF,AA,BB,CC,DD,EE,FF},
 ABCDEF=GetABCDEF[d,u1,u2,u3];
 AA=ABCDEF[[1]];  BB=ABCDEF[[2]]; CC=ABCDEF[[3]];
 DD=-ABCDEF[[4]]; EE=ABCDEF[[5]]; FF=-ABCDEF[[6]];
 Integrate[Integrate[Integrate[
  P[Xi1, Xi2, Xi3, u1+Xi1, u2+Xi2, u3+Xi3],
  {Xi1,Xi2+DD,BB}],{Xi2,Xi3+FF,BB-DD}],{Xi3,EE,BB-DD-FF}]
];

(*************************************************************)
(*************************************************************)
(*************************************************************)
PBar3CV[d_, u1_, u2_, u3_, Xi3_]:=Module[ {ABCDEF,AA,BB,CC,DD,EE,FF},
 ABCDEF=GetABCDEF[d,u1,u2,u3];
 AA=ABCDEF[[1]];  BB=ABCDEF[[2]]; CC=ABCDEF[[3]];
 DD=-ABCDEF[[4]]; EE=ABCDEF[[5]]; FF=-ABCDEF[[6]];
 Integrate[Integrate[
  P[Xi1, Xi2, Xi3, u1+Xi1, u2+Xi2, u3+Xi3],
  {Xi1,Xi2+DD,BB}],{Xi2,Xi3+FF,BB-DD}]
];

(*************************************************************)
(*************************************************************)
(*************************************************************)
PBar2CV[d_, u1_, u2_, u3_, Xi3_, Xi2_]:=Module[ {ABCDEF,AA,BB,CC,DD,EE,FF},
 ABCDEF=GetABCDEF[d,u1,u2,u3];
 AA=ABCDEF[[1]];  BB=ABCDEF[[2]]; CC=ABCDEF[[3]];
 DD=-ABCDEF[[4]]; EE=ABCDEF[[5]]; FF=-ABCDEF[[6]];
 Integrate[ P[Xi1, Xi2, Xi3, u1+Xi1, u2+Xi2, u3+Xi3], {Xi1,Xi2+DD,BB} ]
];

(*************************************************************)
(*************************************************************)
(*************************************************************)
(*
GetScriptP4CV=Module[
 {}, 
 For[ d=0, d<dMax, d++,

     uXiVector=GetuXiVector[d, 4];
     PBar=PBar4CV[d, uXiVector[[1]], uXiVector[[2]], uXiVector[[3]] ];
     MySeries=Series[ PBar, {w,0,10} ];
     For[ n=0, n<10, n++,
          ScriptP = FullSimplify[Coefficient[MySeries,w,n]];
          If[ !(ScriptP===0),
              Print[ "P[", d, "][", n, "]=", CForm[ScriptP], ";" ]
            ]
        ];
     Print[];
]];
*)

(*************************************************************)
(*************************************************************)
(*************************************************************)
(*
GetScriptP3CV=Module[
 {}, 
 For[ d=0, d<dMax, d++,

     uXiVector=GetuXiVector[d, 3];
     PBar=PBar3CV[d, uXiVector[[1]], uXiVector[[2]],
                     uXiVector[[3]], uXiVector[[4]] ];
     MySeries=Series[ PBar, {w,0,10} ];
     For[ n=0, n<10, n++,
          ScriptP = FullSimplify[Coefficient[MySeries,w,n]];
          If[ !(ScriptP===0),
              Print[ "P[", d, "][", n, "]=", CForm[ScriptP], ";" ];
            ]
        ];
     Print[];
]];
*)

(*************************************************************)
(*************************************************************)
(*************************************************************)
GetScriptP2CV=Module[
 {}, 
 For[ d=0, d<dMax, d++,

     uXiVector=GetuXiVector[d, 2];
     PBar=PBar2CV[d, uXiVector[[1]], uXiVector[[2]],
                     uXiVector[[3]], uXiVector[[4]], uXiVector[[5]] ];
     MySeries=Series[ PBar, {w,0,10} ];
     For[ n=0, n<10, n++,
          ScriptP = FullSimplify[Coefficient[MySeries,w,n]];
          If[ !(ScriptP===0), 
              Print[ "P[", d, "][", n, "]=", ScriptP, ";" ]
            ]
        ];
     Print[];
]];
